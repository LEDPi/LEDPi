#ifndef _H_LOGGER_
#define _H_LOGGER_

////////////////////////////////////////////////////////////////////////////////
// FILE: logger.h
// DESC: Logs the messages on different log level in different log outputs.
//	 (A text file and the gui output).
////////////////////////////////////////////////////////////////////////////////

#include <stdarg.h>
#include <stdlib.h>
#include <stdio.h>
#include <stdbool.h>
#include <time.h>

#include <mux/mux.h>
#include <gui/gui_int.h>
#include <gui/gui.h>
#include <main.h>
#include <net/net.h>

#define LOG_FILE "log"

typedef enum
{
	LOG_ERROR	= 0,
	LOG_WARNING	= 1,
	LOG_DEBUG	= 2,
	LOG_COM		= 3,
} log_lvl_t, *p_log_lvl_t;

////////////////////////////////////////////////////////////////////////////////
// Initializes the logger. Creates a new log text file, after the deleting the 
// old file (if there was one).
////////////////////////////////////////////////////////////////////////////////
bool log_init();

////////////////////////////////////////////////////////////////////////////////
// Logs the given formatted message.
// PARA:
//	level:	the log level
//	msg:	the log message
//	...:	formatted parameter
////////////////////////////////////////////////////////////////////////////////
void log(log_lvl_t level, const char *msg, ...);

////////////////////////////////////////////////////////////////////////////////
// Logs the given formatted message.
// PARA:
//	va:	formatted parameter
//	level:	the log level
//	msg:	the log message
////////////////////////////////////////////////////////////////////////////////
void log_v(va_list va, log_lvl_t level, const char *msg);

////////////////////////////////////////////////////////////////////////////////
// Logs the given formatted error message
// PARA:
//	msg:	the log message
//	...:	formatted parameter
////////////////////////////////////////////////////////////////////////////////
void log_error(const char *msg, ...);

////////////////////////////////////////////////////////////////////////////////
// Logs the given formatted warning.
// PARA:
//	msg:	the log message
//	...:	formatted parameter
////////////////////////////////////////////////////////////////////////////////
void log_warning(const char *msg, ...);

////////////////////////////////////////////////////////////////////////////////
// Logs the given formatted debug message
// PARA:
//	msg:	the log message
//	...:	formatted parameter
////////////////////////////////////////////////////////////////////////////////
void log_debug(const char *msg, ...);

////////////////////////////////////////////////////////////////////////////////
// Logs the given formatted communication message
// PARA:
//	msg:	the log message
//	...:	formatted parameter
////////////////////////////////////////////////////////////////////////////////
void log_com(const char *msg, ...); 

#endif // _H_LOGGER__
