#ifndef _NET_BUFFER_
#define _NET_BUFFER_

////////////////////////////////////////////////////////////////////////////////
// FILE: net_buffer
// DESC: first receive buffer for the udp communication. Somehow similar to a
// 	 ring buffer, but with a different read pointer behaviour.
////////////////////////////////////////////////////////////////////////////////

#include <stdint.h>
#include <stdlib.h>

#include <gui/logger.h>

typedef struct
{
	uint16_t maxLen;
	uint16_t writePos;
	uint16_t readPos;
	uint8_t *buffer;
} netbuffer_t, *pnetbuffer_t;

////////////////////////////////////////////////////////////////////////////////
// Creates an empty ring buffer with the given size.
//
// PARA:
//	max_len: the maximal number of elements in the buffer.
////////////////////////////////////////////////////////////////////////////////
pnetbuffer_t net_buffer_create(uint16_t max_len);

////////////////////////////////////////////////////////////////////////////////
// Releases the memory for this ring buffer.
//
// PARA:
//	buffer: the ring buffer
////////////////////////////////////////////////////////////////////////////////
void net_buffer_delete(pnetbuffer_t buffer);

////////////////////////////////////////////////////////////////////////////////
// Adds a range of bytes to the ring buffer.
//
// PARA:
//	buffer: the ring buffer
//	len:	the number of elements to copy
//	data:	the source array
////////////////////////////////////////////////////////////////////////////////
void net_buffer_add_range(pnetbuffer_t buffer, uint8_t len, uint8_t data[]);

////////////////////////////////////////////////////////////////////////////////
// Adds a single element to the ring buffer.
//
// PARA:
//	buffer: the ring buffer
//	data:	the element which will be added.
////////////////////////////////////////////////////////////////////////////////
void net_buffer_add(pnetbuffer_t buffer, uint8_t data);

////////////////////////////////////////////////////////////////////////////////
// Deletes the first elelemt in the buffer.
//
// PARA:
//	buffer: the ring buffer
////////////////////////////////////////////////////////////////////////////////
void net_buffer_remove(pnetbuffer_t buffer);

////////////////////////////////////////////////////////////////////////////////
// Deletes the first x elements.
//
// PARA:
//	buffer: the ring buffer
//	len:	the number to delete
////////////////////////////////////////////////////////////////////////////////
void net_buffer_remove_range(pnetbuffer_t buffer, uint8_t len);

////////////////////////////////////////////////////////////////////////////////
// Returns the nth element in the array.
//
// PARA:
//	buffer: the ring buffer
//	index:	the index
////////////////////////////////////////////////////////////////////////////////
uint8_t net_buffer_get(pnetbuffer_t buffer, int index);

////////////////////////////////////////////////////////////////////////////////
// Returns the number of elements in the ring buffer.
//
// PARA:
//	buffer: the ring buffer
////////////////////////////////////////////////////////////////////////////////
uint16_t net_buffer_count(pnetbuffer_t buffer);

#endif // _NET_BUFFER_
